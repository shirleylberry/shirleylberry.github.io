<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Codename Berry]]></title>
  <link href="http://shirleylberry.github.io/atom.xml" rel="self"/>
  <link href="http://shirleylberry.github.io/"/>
  <updated>2016-03-02T02:39:23-05:00</updated>
  <id>http://shirleylberry.github.io/</id>
  <author>
    <name><![CDATA[Shirley Berry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reflecting on Active Record]]></title>
    <link href="http://shirleylberry.github.io/blog/2016/03/01/collection-classes-in-active-record/"/>
    <updated>2016-03-01T22:57:42-05:00</updated>
    <id>http://shirleylberry.github.io/blog/2016/03/01/collection-classes-in-active-record</id>
    <content type="html"><![CDATA[<p>Reflection lets us look at our objects, and get more information about how they relate to other objects. We&rsquo;ll be looking at three in this blog post: <code>reflect_on_all_associations</code>, <code>reflect_on_association</code>, and <code>reflections</code>.</p>

<p>For our examples, let&rsquo;s assume we have a class called Creator and another called Game. A game belongs_to a creator, and a creator has_many games. We&rsquo;ll also say that a creator has_many players through games.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="c1"># models/game.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Game</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:player_games</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:players</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:player_games</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:creator</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># models/player.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Player</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:player_games</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:games</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:player_games</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># models/creator.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Creator</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:games</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:players</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:games</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>reflect_on_all_associations</h1>

<p>This method will return an array listing all of the associations that class has, and some information about those associations.</p>

<p>Let&rsquo;s take a look at what we get when we call <code>reflect_on_all_associations</code> on our game class in the console:</p>

<p><img src="http://i.imgur.com/sT2iZQz.png" alt="Looking at games associations" /></p>

<p>It&rsquo;s long, and a bit hard to read. Luckily, <code>reflect_on_all_associations</code> lets us pass in a parameter to specify what macro, or type of associations, we want to look at. Let&rsquo;s try that again, this time looking only at what Games belongs to:</p>

<p><img src="http://i.imgur.com/tszJUoc.png" alt="Looking at games has_many associations" /></p>

<p>Better, but still not perfect. Now that we have this array, we can iterate over it to get even more useful information out of it.</p>

<p>Let&rsquo;s look at all the classes that games has a has_many relationship with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="no">Game</span><span class="o">.</span><span class="n">reflect_on_all_associations</span><span class="p">(</span><span class="ss">:has_many</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">relation</span><span class="o">|</span> <span class="n">relation</span><span class="o">.</span><span class="n">name</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will output <code>players</code> and <code>player_games</code>.</p>

<h1>reflect_on_association</h1>

<p>We also have a tool to look more closely at a specific association.</p>

<p><img src="http://i.imgur.com/lsnj853.png" alt="Looking at games creator association" /></p>

<p>We can also see what kind of association the two models have.
<img src="http://i.imgur.com/uO1OYPn.png" alt="Looking at games creator association type" /></p>

<h1>reflections</h1>

<p>Reflections, unlike the other two methods we&rsquo;ve looked at, returns a hash instead of an array. It looks pretty similar to the array we get while calling <code>reflect_on_all_associations</code> without a parameter, but includes the names of the associated tables as keys.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="no">Player</span><span class="o">.</span><span class="n">reflections</span><span class="o">.</span><span class="n">keys</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above will return [&ldquo;player_games&rdquo;, &ldquo;games&rdquo;], an array of all the table names that the Player model is associated with.</p>

<h1>Why is this Useful?</h1>

<p>If you&rsquo;re creating your own models and structuring the database yourself, you probably won&rsquo;t find yourself needing these methods very often. But if you&rsquo;re working with an unfamiliar database, and trying to get a better idea of how all the models fit together, reflecting on the associations can be a useful tool.</p>

<p>Something I&rsquo;ve been wondering about, also, is whether there&rsquo;s a way to create forms more generically. Usually, we want a form that will render an input field for each of the model&rsquo;s attributes, with only a few variations.</p>

<p>As I was looking through the <a href="http://api.rubyonrails.org/classes/ActiveRecord/Reflection/ClassMethods.html">docs for reflection</a>, I found this note about reflections:
&ldquo;This information can, for example, be used in a form builder that takes an Active Record object and creates input fields for all of the attributes depending on their type and displays the associations to other objects.&rdquo;</p>

<p>We could use reflection to create a generic form for a model, one that would adapt if we, say, added another relation to the model at a later date. The following code, for example, will create many input fields for associations that Game has a has_many relationship with, and a single input field for associations that Game has a belongs_to relationship with.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'><span class="nt">&lt;form&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% Game.reflect_on_all_associations.each do |association| %&gt;
</span><span class='line'>    <span class="err">&lt;</span>% if association.macro == :belongs_to %&gt;
</span><span class='line'>      <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= association.name %&gt;:<span class="nt">&lt;input</span> <span class="na">type =</span><span class="err"> </span><span class="s">&quot;text&quot;</span> <span class="na">name =</span><span class="err"> </span><span class="s">&quot;&lt;%=association.name%&gt;&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>% elsif association.macro == :has_many %&gt;
</span><span class='line'>      <span class="err">&lt;</span>% 5.times do |i|%&gt;
</span><span class='line'>        <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= association.name %&gt;:<span class="nt">&lt;input</span> <span class="na">type =</span><span class="err"> </span><span class="s">&quot;text&quot;</span> <span class="na">name =</span><span class="err"> </span><span class="s">&quot;&lt;%=association.name%&gt;&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>      <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>    <span class="err">&lt;</span>% end %&gt;
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a very simple (and not very useful) example of something that could be very powerful and adaptable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluating Binding in ERB]]></title>
    <link href="http://shirleylberry.github.io/blog/2016/02/16/evaluating-binding-in-erb/"/>
    <updated>2016-02-16T21:12:42-05:00</updated>
    <id>http://shirleylberry.github.io/blog/2016/02/16/evaluating-binding-in-erb</id>
    <content type="html"><![CDATA[<p>For this blog post, I first set out to understand the use of <strong>binding</strong> in ERB (specifically in the <code>result</code> method). Central to that turned out to be a method called <code>eval</code>, and this post will mostly discuss the interaction between <code>eval</code> and binding, especially in the context of ERB.</p>

<p>ERB, which stands for Embedded RuBy, is a way to embed ruby code and logic in HTML templates. At one key step in creating our template, we call a method called <code>result(binding)</code>. It does some <em>shenanigans</em> and gives us back exactly what we want.</p>

<p><img src="http://i.giphy.com/UNeHvSzLsXwE8.gif" alt="shenanigans" /></p>

<p>The main topic of this blog is those shenanigans, but first let&rsquo;s go over ERB.</p>

<h1>ERB</h1>

<p>Let&rsquo;s say we have a file called <code>add_movie.html.erb</code> that contains the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'><span class="nt">&lt;p&gt;</span>&quot;Added #{movie_name} to your collection.&quot;<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want to take that template, and insert something useful instead of <code>#{movie_name}</code>. First, we need to create a string. Why do we need to create a string? Because that&rsquo;s what ERB.new takes as a parameter. Let&rsquo;s go ahead and create our ERB object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>  <span class="n">file_name</span> <span class="o">=</span> <span class="s2">&quot;views/templates/</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">.html.erb&quot;</span>
</span><span class='line'>  <span class="n">file_contents</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">file_name</span><span class="p">)</span> <span class="c1"># first we create a string</span>
</span><span class='line'>  <span class="n">template</span> <span class="o">=</span> <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">file_contents</span><span class="p">)</span> <span class="c1"># then we create a new ERB object using that string</span>
</span><span class='line'>  <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span><span class='line'>  <span class="c1"># ... continued below</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we&rsquo;ve hit a <code>binding.pry</code>, let&rsquo;s take a look at what we&rsquo;ve created so far in this method.</p>

<p><img src="http://i.imgur.com/E8iuTRr.png" alt="Looking at template with binding.pry" /></p>

<p>Most of this will look the same every time you create a new ERB object, except for <code>@src</code>, which we&rsquo;ll be looking at in a minute. It&rsquo;s part of the magic. Let&rsquo;s keep going.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'>  <span class="n">formatted_file_contents</span> <span class="o">=</span> <span class="n">template</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span> <span class="c1"># shenanigans</span>
</span><span class='line'>  <span class="n">output_file</span> <span class="o">=</span> <span class="s2">&quot;views/output/</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">.html&quot;</span>
</span><span class='line'>  <span class="n">new_file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="n">formatted_file_contents</span><span class="p">)</span>
</span><span class='line'>  <span class="sb">`open -a &#39;Google Chrome&#39; </span><span class="si">#{</span><span class="n">output_file</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We call the <code>result</code> method on our ERB object, and pass in <strong>binding</strong>. We know that we need to pass in binding so that our template will know what the variable #{movie_name} should be, but not exactly how binding helps. Then ERB does some magic somehow and puts out a string that has had its ruby code magically evaluated.</p>

<p><img src="http://i.imgur.com/XxdoZQG.png" alt="The value of formatted_file_contents" /></p>

<p><img src="http://i.imgur.com/YsbKHg1.gif" alt="Shia tells it like it is" /></p>

<h1>The Source</h1>

<p>To figure out what <code>result(binding)</code> is doing, let&rsquo;s go to the source (code).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'>           <span class="c1"># File erb.rb, line 831</span>
</span><span class='line'><span class="k">def</span> <span class="nf">result</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="no">TOPLEVEL_BINDING</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@safe_level</span>
</span><span class='line'><span class="nb">proc</span> <span class="p">{</span>
</span><span class='line'>  <span class="vg">$SAFE</span> <span class="o">=</span> <span class="vi">@safe_level</span>
</span><span class='line'>  <span class="nb">eval</span><span class="p">(</span><span class="vi">@src</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span> <span class="c1"># &lt;- Right here</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="vi">@src</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span> <span class="c1"># &lt;- here too</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a lot here, but if we strip it down, it&rsquo;s really only running one command: <code>eval()</code>. What is <code>eval()</code>?</p>

<h1>Eval and Binding</h1>

<p><code>eval()</code> is a method that takes in a string and evaluates that string as ruby code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;7 * 5&quot;</span><span class="p">)</span> <span class="c1"># this will return 35</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note of warning: Do not use <code>eval()</code> without adult supervision. It is dangerous.</em></p>

<p>The cool thing about <code>eval()</code> is that you can pass in an optional parameter to it: <strong>binding</strong>.</p>

<p>The Ruby docs define <strong>binding</strong> as follows: &ldquo;Objects of class Binding encapsulate the execution context at some particular place in the code and retain this context for future use.&rdquo; Or as <a href="https://codequizzes.wordpress.com%0A/2014/05/18/rubys-binding-class-binding-objects/">this blog</a> put it, &ldquo;A Binding is a whole scope packaged as an object. The idea is that you can create a Binding to capture the local scope and carry it around.&rdquo;</p>

<p>So, binding is like a portable scope, and the main place it appears is in <code>eval()</code>. The binding parameter will define the scope in which the code you&rsquo;ve passed in is executed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="k">def</span> <span class="nf">a_totally_different_scope</span>
</span><span class='line'>  <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;Goodbye&quot;</span>
</span><span class='line'>  <span class="nb">binding</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'><span class="c1"># here, we don&#39;t pass in a scope, so it defaults to the current scope</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;str + &#39; Jeff&#39;&quot;</span><span class="p">)</span>                             <span class="c1">#=&gt; &quot;Hello Jeff&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># here, we pass in a scope, so we&#39;ll go to that totally_different_scope to</span>
</span><span class='line'><span class="c1"># figure out what str equals</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;str + &#39; Jeff&#39;&quot;</span><span class="p">,</span> <span class="n">a_totally_different_scope</span><span class="p">)</span>  <span class="c1">#=&gt; &quot;Goodbye Jeff&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s keep looking at the source code for <code>result()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'>           <span class="c1"># File erb.rb, line 831</span>
</span><span class='line'><span class="k">def</span> <span class="nf">result</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="no">TOPLEVEL_BINDING</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@safe_level</span>
</span><span class='line'><span class="nb">proc</span> <span class="p">{</span>
</span><span class='line'>  <span class="vg">$SAFE</span> <span class="o">=</span> <span class="vi">@safe_level</span>
</span><span class='line'>  <span class="nb">eval</span><span class="p">(</span><span class="vi">@src</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span> <span class="c1"># &lt;- Right here</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="vi">@src</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span> <span class="c1"># &lt;- here too</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve figured out what b is, but what is that <code>@src</code> parameter? It&rsquo;s an instance variable, so we know it must belong to the object calling <code>result()</code>, which is template. Let&rsquo;s look at template again.</p>

<p><img src="http://i.imgur.com/E8iuTRr.png" alt="Looking at template with binding.pry" /></p>

<p>Taking a closer look at <code>@src</code>, it looks a lot like ruby. In Ruby, the semicolon <code>;</code> lets you put more than one command on a single line, so let&rsquo;s split <code>@src</code> up into separate lines.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="s2">&quot;#coding:UTF-8</span><span class="se">\n</span><span class="s2"></span>
</span><span class='line'><span class="s2">_erbout = &#39;&#39;</span>
</span><span class='line'><span class="s2">_erbout.concat </span><span class="se">\&quot;</span><span class="s2">&lt;p&gt; </span><span class="se">\&quot;</span><span class="s2"></span>
</span><span class='line'><span class="s2">_erbout.concat(( </span><span class="se">\&quot;</span><span class="s2">Added </span><span class="se">\#</span><span class="s2">{@movie_name} to your collection.</span><span class="se">\&quot;</span><span class="s2"> ).to_s)</span>
</span><span class='line'><span class="s2">_erbout.concat </span><span class="se">\&quot;</span><span class="s2"> &lt;/p&gt;</span><span class="se">\&quot;</span><span class="s2"></span>
</span><span class='line'><span class="s2">_erbout.force_encoding(__ENCODING__)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That looks exactly like ruby, just inside of a string. Exactly what we need for <code>eval</code>.</p>

<p>When you call <code>template.result(binding)</code> it runs <code>eval()</code> on the <code>@str</code> instance variable of template. It evaluates that string as ruby code, in the scope of whatever binding was passed in. It creates an empty string _erbout, and then builds back up the string we passed in to ERB.new, without the <code>&lt;% %&gt;</code> tags and calling <code>.to_s</code> on the code grouped in those tags.</p>

<p>It then passes the result back out as a string which we can then use to create an HTML template.</p>

<p>When it comes down to it, ERB is still magic, but we can at least be in on the trick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Octopress Post]]></title>
    <link href="http://shirleylberry.github.io/blog/2016/02/11/first-octopress-post/"/>
    <updated>2016-02-11T09:18:25-05:00</updated>
    <id>http://shirleylberry.github.io/blog/2016/02/11/first-octopress-post</id>
    <content type="html"><![CDATA[<p>&ldquo;Hello blog.&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def Person
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
